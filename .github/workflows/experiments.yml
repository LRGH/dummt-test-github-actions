name: Various experiments

on:
  push:
  pull_request:

jobs:
  os-python:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "ubuntu-latest", "macos-latest"]
        python-version: ["3.10", "pypy2.7", "pypy3.9"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Test python version
      run: |
        python -c 'import sys;print(sys.version)'
        python --version
    - name: Test dependencies ${{ matrix.python-version }} ${{ startsWith(matrix.python-version, 'pypy') }} ${{ matrix.os }} ${{ startsWith(matrix.os, 'macos') }} ${{ ! startsWith(matrix.os, 'macos') }} ${{ ! startsWith(matrix.python-version, 'pypy') || ! startsWith(matrix.os, 'macos') }} ${{ (! startsWith(matrix.python-version, 'pypy')) || (! startsWith(matrix.os, 'macos')) }}
      # pypy on macosx is really too slow
      if: ${{ ! startsWith(matrix.python-version, 'pypy') || ! startsWith(matrix.os, 'macos') }}
      run: |
        python -m pip install pytest pyparsing coverage codecov

  python23:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 2.3
      run: |
        CWD=$(pwd)
        cd ..
        curl -O https://www.python.org/ftp/python/2.3.7/Python-2.3.7.tgz
        tar xzf Python-2.3.7.tgz
        cd Python-2.3.7
        # We need to disable FORTIFY_SOURCE to compile python 2.3
        # cf. https://bugs.launchpad.net/ubuntu/+source/gcc-defaults/+bug/286334
        ./configure BASECFLAGS=-U_FORTIFY_SOURCE
        make
        export PATH=$(pwd):$PATH
        cd $CWD
    - name: Test python version
      run: |
        python -c 'import sys;print(sys.version)'
        python --version

  gcc-12:
    runs-on: "ubuntu-22.04"
    strategy:
      fail-fast: false
    env:
      CC: gcc
    steps:
    - uses: actions/checkout@v3
    - name: Set up GCC 12
      uses: egor-tensin/setup-gcc@v1
      with:
        version: 12
        platform: x64
    - name: Test gcc version
      run: |
        $CC --version
    - name: Compile simple program
      run: |
        case "${{ matrix.platform }}" in x86) CPU=-m32 ;; *) CPU= ;; esac
        echo 'int main() { return 0; }' > a.c
        $CC $CPU -o a.out a.c
        file a.out
        ./a.out
    - name: Compile zlib
      run: |
        curl -O https://zlib.net/fossils/zlib-1.2.8.tar.gz
        tar xzf zlib-1.2.8.tar.gz
        cd zlib-1.2.8
        ./configure
        gcc -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN -S -o inflate.s inflate.c
        gcc -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN -c -o inflate.o inflate.c
        # curl --upload-file inflate.s 'https://paste.c-net.org/'
        # curl --upload-file inflate.o 'https://paste.c-net.org/'

  gcc-compilers:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04"]
        gcc-version: ["7", "8", "9", "10", "11"]
        platform: ["x64", "x86"]
    env:
      CC: gcc
    steps:
    - uses: actions/checkout@v3
    - name: Set up GCC ${{ matrix.gcc-version }}
      uses: egor-tensin/setup-gcc@v1
      with:
        version: ${{ matrix.gcc-version }}
        platform: ${{ matrix.platform }}
    - name: Test gcc version
      run: |
        $CC --version
    - name: Compile simple program
      run: |
        case "${{ matrix.platform }}" in x86) CPU=-m32 ;; *) CPU= ;; esac
        echo 'int main() { return 0; }' > a.c
        $CC $CPU -o a.out a.c
        file a.out
        ./a.out

  gcc-6:
    runs-on: "ubuntu-20.04"
    # does not work on ubuntu-22.04 :-(
    strategy:
      fail-fast: false
    env:
      CC: gcc-6
    steps:
    - uses: actions/checkout@v3
    - name: Set up GCC 6
      run: |
        echo "deb http://dk.archive.ubuntu.com/ubuntu/ bionic main universe" | sudo tee -a /etc/apt/sources.list
        sudo apt-get update
        sudo apt-get install g++-6
    - name: Test gcc version
      run: |
        $CC --version
    - name: Compile simple program
      run: |
        echo 'int main() { return 0; }' > a.c
        $CC -o a.out a.c
        ./a.out

  gcc-5:
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: false
    env:
      CC: gcc-5
    steps:
    - uses: actions/checkout@v3
    - name: Set up GCC 5
      run: |
        echo "deb http://dk.archive.ubuntu.com/ubuntu/ xenial main universe" | sudo tee -a /etc/apt/sources.list
        sudo apt-get update
        sudo apt-get install g++-5
    - name: Test gcc version
      run: |
        $CC --version
    - name: Compile simple program
      run: |
        echo 'int main() { return 0; }' > a.c
        $CC -o a.out a.c
        ./a.out

  gcc-4-8:
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: false
    env:
      CC: gcc-4.8
    steps:
    - uses: actions/checkout@v3
    - name: Download GCC 4.8
      run: |
        sudo apt-get update
        mkdir install_g++-4.8
        cd install_g++-4.8/
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/g++-4.8_4.8.5-4ubuntu8_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/libstdc++-4.8-dev_4.8.5-4ubuntu8_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/gcc-4.8-base_4.8.5-4ubuntu8_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/gcc-4.8_4.8.5-4ubuntu8_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/libgcc-4.8-dev_4.8.5-4ubuntu8_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/cpp-4.8_4.8.5-4ubuntu8_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.8/libasan0_4.8.5-4ubuntu8_amd64.deb
        sudo apt-get install ./gcc-4.8_4.8.5-4ubuntu8_amd64.deb ./gcc-4.8-base_4.8.5-4ubuntu8_amd64.deb ./libstdc++-4.8-dev_4.8.5-4ubuntu8_amd64.deb ./cpp-4.8_4.8.5-4ubuntu8_amd64.deb ./libgcc-4.8-dev_4.8.5-4ubuntu8_amd64.deb ./libasan0_4.8.5-4ubuntu8_amd64.deb ./g++-4.8_4.8.5-4ubuntu8_amd64.deb
    - name: Test gcc version
      run: |
        $CC --version
    - name: Compile simple program
      run: |
        echo 'int main() { return 0; }' > a.c
        $CC -o a.out a.c
        ./a.out

  plasmasm-graalpy:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python "graalpy-22.3"
      uses: actions/setup-python@v5
      with:
        python-version: "graalpy-22.3"
    - name: Install dependencies
      run: |
        python -m pip install pytest pyparsing coverage codecov
        cd ..
        git clone https://github.com/LRGH/elfesteem
        git clone https://github.com/LRGH/miasmX
        git clone https://github.com/LRGH/crysp
        git clone https://github.com/LRGH/amoco
        git clone https://github.com/LRGH/plasmasm
        echo > amoco/amoco/__init__.py # don't import grandalf
        cat plasmasm/plasmasm/python/amoco-config.py > amoco/amoco/config.py # avoid dependency on traitlets
        cd plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        echo '** Simple tests to verify that dependencies are working'
        python tools/disass.py -c /MIASM non_regression/basic_x86_linux.intel.s || true
        python tools/disass.py -c /MIASM non_regression/basic_x86_linux.att.s || true
        python tools/disass.py -c /MIASM non_regression/basic_x86_linux.o || true
    - name: Unit tests asm_basic (without using pytest module)
      run: |
        cd ../plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        python non_regression/run_tests.py test_asm_basic
    - name: Coverage does not work with graalpy
      run: |
        echo '#! /bin/sh' > `which coverage`
        echo 'shift; shift; python "$@"' >> `which coverage`
    - name: Unit tests errors
      run: |
        cd ../plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        coverage() { shift; shift; python "$@"; }
        coverage run -a -m pytest --durations=10 non_regression/test_errors.py
    - name: Unit tests asm_basic
      run: |
        cd ../plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        coverage run -a -m pytest --durations=10 non_regression/test_asm_basic.py
    - name: Unit tests asm_macosx
      run: |
        cd ../plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        coverage run -a -m pytest --durations=10 non_regression/test_asm_macosx.py
    - name: Unit tests asm_switch
      run: |
        cd ../plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        coverage run -a -m pytest --durations=10 non_regression/test_asm_switch.py
    - name: Unit tests asm_other
      # pypy on macosx is really too slow
      if: ${{ ! startsWith(matrix.python-version, 'pypy') || ! startsWith(matrix.os, 'macos') }}
      run: |
        cd ../plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        coverage run -a -m pytest --durations=10 non_regression/test_asm_other.py
    - name: Unit tests bin
      run: |
        cd ../plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        coverage run -a -m pytest --durations=10 non_regression/test_bin.py
    - name: Unit tests display
      run: |
        cd ../plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        coverage run -a -m pytest --durations=10 non_regression/test_display.py
    - name: Unit tests lineapi
      run: |
        cd ../plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        coverage run -a -m pytest --durations=10 non_regression/test_lineapi.py
    - name: Unit tests objdump
      run: |
        cd ../plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        coverage run -a -m pytest --durations=10 non_regression/test_objdump.py
    - name: Global tests asm_fullsoftware
      run: |
        cd ../plasmasm
        export PYTHONPATH=../elfesteem:../miasmX:../amoco:../crysp
        coverage run -a -m pytest --durations=10 non_regression/test_asm_fullsoftware.py
    - name: Update codecov
      run: |
        codecov

