name: Various experiments

on:
  push:
  pull_request:

jobs:
  os-python:
    if: false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "ubuntu-latest", "macos-latest"]
        python-version: ["3.10", "pypy2.7", "pypy3.9"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Test python version
      run: |
        python -c 'import sys;print(sys.version)'
        python --version
    - name: Test dependencies ${{ matrix.python-version }} ${{ startsWith(matrix.python-version, 'pypy') }} ${{ matrix.os }} ${{ startsWith(matrix.os, 'macos') }} ${{ ! startsWith(matrix.os, 'macos') }} ${{ ! startsWith(matrix.python-version, 'pypy') || ! startsWith(matrix.os, 'macos') }} ${{ (! startsWith(matrix.python-version, 'pypy')) || (! startsWith(matrix.os, 'macos')) }}
      # pypy on macosx is really too slow
      if: ${{ ! startsWith(matrix.python-version, 'pypy') || ! startsWith(matrix.os, 'macos') }}
      run: |
        python -m pip install pytest pyparsing coverage codecov

  python23:
    if: false
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 2.3
      run: |
        CWD=$(pwd)
        cd ..
        curl -O https://www.python.org/ftp/python/2.3.7/Python-2.3.7.tgz
        tar xzf Python-2.3.7.tgz
        cd Python-2.3.7
        # We need to disable FORTIFY_SOURCE to compile python 2.3
        # cf. https://bugs.launchpad.net/ubuntu/+source/gcc-defaults/+bug/286334
        ./configure BASECFLAGS=-U_FORTIFY_SOURCE
        make
        export PATH=$(pwd):$PATH
        cd $CWD
    - name: Test python version
      run: |
        python -c 'import sys;print(sys.version)'
        python --version

  gcc:
    if: false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04"]
        gcc-version: ["4.4", "4.6", "4.8", "5", "6", "7", "8", "9", "10", "11", "12"]
        platform: ["x64", "x86"]
        exclude:
          - {os: ubuntu-20.04, gcc-version: 12}
          - {os: ubuntu-20.04, gcc-version: 13}
          - {os: ubuntu-22.04, gcc-version: 8}
          - {os: ubuntu-22.04, gcc-version: 4.4}
          - {os: ubuntu-22.04, gcc-version: 4.6}
    env:
      CC: gcc
    steps:
    - uses: actions/checkout@v3
    - name: Set up GCC ${{ matrix.gcc-version }}
      uses: LRGH/setup-gcc@v2
      with:
        version: ${{ matrix.gcc-version }}
        platform: ${{ matrix.platform }}
    - name: Test gcc version
      run: |
        $CC --version
    - name: Compile simple program
      run: |
        case "${{ matrix.platform }}" in x86) CPU=-m32 ;; *) CPU= ;; esac
        echo 'int main() { return 0; }' > a.c
        $CC $CPU -o a.out a.c
        file a.out
        ./a.out
    - name: Compile zlib
      run: |
        curl -O https://zlib.net/fossils/zlib-1.2.8.tar.gz
        tar xzf zlib-1.2.8.tar.gz
        cd zlib-1.2.8
        ./configure
        make clean; make test CC="$CC $CPU"
        file minigzip
        # curl --upload-file minigzip 'https://paste.c-net.org/'
        # gcc -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN -S -o minigzip.s test/minigzip.c
        # gcc -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN -c -o minigzip.o test/minigzip.c
        # curl --upload-file minigzip.s 'https://paste.c-net.org/'
        # curl --upload-file minigzip.o 'https://paste.c-net.org/'

  gcc-m32:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        gcc-version: [4.4, 4.6, 4.8, 5, 6, 7, 8, 9, 10, 11, 12, 13]
        platform: [x86]
        exclude:
          - {os: ubuntu-22.04, gcc-version: 4.4}
          - {os: ubuntu-22.04, gcc-version: 4.6}
          - {os: ubuntu-22.04, gcc-version: 4.8, platform: x86}
          - {os: ubuntu-20.04, gcc-version: 4.8}
          - {os: ubuntu-20.04, gcc-version: 5}
          - {os: ubuntu-22.04, gcc-version: 5, platform: x86}
          - {os: ubuntu-20.04, gcc-version: 6}
          - {os: ubuntu-22.04, gcc-version: 6, platform: x86}
          - {os: ubuntu-20.04, gcc-version: 7}
          - {os: ubuntu-22.04, gcc-version: 8}
          - {os: ubuntu-20.04, gcc-version: 9}
          - {os: ubuntu-20.04, gcc-version: 10}
          - {os: ubuntu-20.04, gcc-version: 11}
          - {os: ubuntu-20.04, gcc-version: 12}
          - {os: ubuntu-20.04, gcc-version: 13}
    steps:
    - uses: actions/checkout@v4
    - name: Set up GCC ${{ matrix.gcc-version }}
      uses: LRGH/setup-gcc@v3
      with:
        version: ${{ matrix.gcc-version }}
        platform: ${{ matrix.platform }}
    - name: Test gcc version
      run: |
        gcc --version
    - name: Compile simple 32-bit program
      run: |
        echo 'int main() { return 0; }' > a.c
        gcc -m32 -o a.out a.c
        file a.out
        ./a.out
    - name: Using #include <errno.h>
      run: |
        echo '#include <errno.h>' > a.c
        echo 'int main() { return 0; }' >> a.c
        gcc -m32 -o a.out a.c
        file a.out
        ./a.out
    - name: Compile zlib, 32-bits
      run: |
        curl -O https://zlib.net/fossils/zlib-1.2.8.tar.gz
        tar xzf zlib-1.2.8.tar.gz
        cd zlib-1.2.8
        ./configure
        flags="-m32 -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN"
        make clean; make test CFLAGS="$flags" SFLAGS="-fPIC $flags"
        file minigzip

  gcc-4-4:
    if: false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04"]
        exclude:
          - {os: ubuntu-22.04}
    env:
      CC: gcc-4.4
    steps:
    - uses: actions/checkout@v4
    - name: Download GCC 4.4
      run: |
        sudo apt-get update
        mkdir install_g++-4.4
        cd install_g++-4.4/
        wget http://mirrors.edge.kernel.org/ubuntu/pool/universe/g/gcc-4.4/g++-4.4_4.4.7-8ubuntu1_amd64.deb
        wget http://mirrors.edge.kernel.org/ubuntu/pool/universe/g/gcc-4.4/libstdc++6-4.4-dev_4.4.7-8ubuntu1_amd64.deb
        wget http://mirrors.edge.kernel.org/ubuntu/pool/universe/g/gcc-4.4/gcc-4.4-base_4.4.7-8ubuntu1_amd64.deb
        wget http://mirrors.edge.kernel.org/ubuntu/pool/universe/g/gcc-4.4/gcc-4.4_4.4.7-8ubuntu1_amd64.deb
        wget http://mirrors.edge.kernel.org/ubuntu/pool/universe/g/gcc-4.4/cpp-4.4_4.4.7-8ubuntu1_amd64.deb
        wget http://mirrors.edge.kernel.org/ubuntu/pool/universe/g/gcc-4.4/gcc-4.4-multilib_4.4.7-8ubuntu1_amd64.deb
        wget http://archive.ubuntu.com/ubuntu/pool/main/g/gcc-10/lib32gcc1_10.5.0-1ubuntu1~20.04_amd64.deb
        wget https://mirrors.edge.kernel.org/ubuntu/pool/main/m/mpfr4/libmpfr4_3.1.2-1_amd64.deb
        wget https://mirrors.edge.kernel.org/ubuntu/pool/main/g/glibc/multiarch-support_2.27-3ubuntu1.6_amd64.deb
        sudo apt-get install ./g++-4.4_4.4.7-8ubuntu1_amd64.deb ./libstdc++6-4.4-dev_4.4.7-8ubuntu1_amd64.deb ./gcc-4.4-base_4.4.7-8ubuntu1_amd64.deb ./gcc-4.4_4.4.7-8ubuntu1_amd64.deb ./cpp-4.4_4.4.7-8ubuntu1_amd64.deb ./gcc-4.4-multilib_4.4.7-8ubuntu1_amd64.deb ./libmpfr4_3.1.2-1_amd64.deb ./multiarch-support_2.27-3ubuntu1.6_amd64.deb
    - name: Test gcc version
      run: |
        $CC --version
    - name: Compile simple program
      run: |
        echo 'int main() { return 0; }' > a.c
        $CC -o a.out a.c
        file a.out
        ./a.out
    - name: Compile simple C++ program
      run: |
        echo 'int main() { return 0; }' > a.cpp
        g++-4.4 -o a.out a.cpp
        file a.out
        ./a.out
    - name: Compile simple 32-bit program
      run: |
        echo 'int main() { return 0; }' > a.c
        $CC -m32 -o a.out a.c
        file a.out
        ./a.out
    - name: Compile zlib
      run: |
        curl -O https://zlib.net/fossils/zlib-1.2.8.tar.gz
        tar xzf zlib-1.2.8.tar.gz
        cd zlib-1.2.8
        gcc --version
        ./configure
        make clean; make test
        file minigzip
    - name: Compile zlib, 32-bits
      run: |
        cd zlib-1.2.8
        flags="-m32 -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN"
        make clean; make test CFLAGS="$flags" SFLAGS="-fPIC $flags"
        file minigzip

  gcc-4-6:
    if: false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04"]
    env:
      CC: gcc-4.6
    steps:
    - uses: actions/checkout@v4
    - name: Download GCC 4.6
      run: |
        sudo apt-get update
        mkdir install_g++-4.6
        cd install_g++-4.6/
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.6/g++-4.6_4.6.4-6ubuntu2_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.6/libstdc++6-4.6-dev_4.6.4-6ubuntu2_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.6/gcc-4.6-base_4.6.4-6ubuntu2_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.6/gcc-4.6_4.6.4-6ubuntu2_amd64.deb
        wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-4.6/cpp-4.6_4.6.4-6ubuntu2_amd64.deb
        wget https://mirrors.edge.kernel.org/ubuntu/pool/main/m/mpfr4/libmpfr4_3.1.2-1_amd64.deb
        wget https://mirrors.edge.kernel.org/ubuntu/pool/main/g/glibc/multiarch-support_2.27-3ubuntu1.6_amd64.deb
        sudo apt-get install ./g++-4.6_4.6.4-6ubuntu2_amd64.deb ./libstdc++6-4.6-dev_4.6.4-6ubuntu2_amd64.deb ./gcc-4.6-base_4.6.4-6ubuntu2_amd64.deb ./gcc-4.6_4.6.4-6ubuntu2_amd64.deb ./cpp-4.6_4.6.4-6ubuntu2_amd64.deb ./libmpfr4_3.1.2-1_amd64.deb ./multiarch-support_2.27-3ubuntu1.6_amd64.deb
    - name: Test gcc version
      run: |
        $CC --version
    - name: Compile simple program
      run: |
        echo 'int main() { return 0; }' > a.c
        $CC -o a.out a.c
        file a.out
        ./a.out
    - name: Compile simple C++ program
      run: |
        echo 'int main() { return 0; }' > a.cpp
        g++-4.6 -o a.out a.cpp
        file a.out
        ./a.out
    - name: Compile simple 32-bit program
      run: |
        echo 'int main() { return 0; }' > a.c
        $CC -m32 -o a.out a.c
        file a.out
        ./a.out

  alpine:
    if: false
    runs-on: ubuntu-latest
    steps:
    - uses: jirutka/setup-alpine@v1
      with:
        # branch: v3.15
        arch: x86
        packages: >
          file
          sudo
          curl
          tar
          bzip2
          m4
          build-base
          make
    - run: cat /etc/alpine-release
      shell: alpine.sh {0}
    - name: Generic
      run: |
        uname -a
        uname -m
        file /usr/bin/dash
    - name: Alpine
      run: |
        uname -a
        uname -m
        file /bin/busybox
      shell: alpine.sh {0}
    - name: simple C compilation
      run: |
        gcc --version
        echo 'int main() { return 0; }' > a.c
        gcc -o a.out a.c
        file a.out
        ./a.out
      shell: alpine.sh {0}
    - name: GMP 4.3.2
      run: |
        curl -O https://ftp.gwdg.de/pub/misc/gcc/infrastructure/gmp-4.3.2.tar.bz2
        bzip2 -cd gmp-4.3.2.tar.bz2 | tar xf -
        cd gmp-4.3.2
        ./configure
        make
        sudo make install
      shell: alpine.sh {0}
    - name: MPFR 2.4.2
      run: |
        curl -O https://ftp.gwdg.de/pub/misc/gcc/infrastructure/mpfr-2.4.2.tar.bz2
        bzip2 -cd mpfr-2.4.2.tar.bz2 | tar xf -
        cd mpfr-2.4.2
        ./configure
        make
        sudo make install
      shell: alpine.sh {0}
    - name: MPC 0.8.1
      run: |
        curl -O https://ftp.gwdg.de/pub/misc/gcc/infrastructure/mpc-0.8.1.tar.gz
        tar xzf mpc-0.8.1.tar.gz
        cd mpc-0.8.1
        ./configure
        make
        sudo make install
      shell: alpine.sh {0}
    - name: GCC 4.9.2
      run: |
        curl -O https://ftp.gnu.org/gnu/gcc/gcc-4.9.2/gcc-4.9.2.tar.gz
        tar xzf gcc-4.9.2.tar.gz
        cd gcc-4.9.2
        ./configure
        make
      shell: alpine.sh {0}
    - name: GCC 3.2.3
      run: |
        curl -O https://ftp.gnu.org/gnu/gcc/gcc-3.2.3.tar.gz
        tar xzf gcc-3.2.3.tar.gz
        cd gcc-3.2.3
        ./configure
        make
      shell: alpine.sh {0}
